name: Build Sliver Server for CentOS 5.11 i686

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便git describe能够工作
          
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        
      - name: Ensure assets script is executable
        run: |
          chmod +x go-assets.sh
          ls -la go-assets.sh

      - name: Create Dockerfile for Alpine
        run: |
          cat > Dockerfile.alpine << 'EOF'
          FROM golang:1.21.6-alpine3.19

          # 安装基本构建工具和依赖
          RUN apk add --no-cache build-base git ca-certificates upx curl bash

          # 设置工作目录
          WORKDIR /build

          # 设置环境变量
          ENV CGO_ENABLED=0
          ENV GOOS=linux
          ENV GOARCH=386
          EOF

      - name: Build Docker image
        run: docker build -t sliver-build -f Dockerfile.alpine .

      - name: Build Sliver for CentOS 5.11
        run: |
          # 创建build.sh脚本
          cat > build.sh << 'EOF'
          #!/bin/sh
          set -e
          
          # 设置版本信息
          export VERSION=$(git describe --abbrev=0 || echo "v0.0.0")
          export COMPILED_AT=$(date +%s)
          export RELEASES_URL="https://api.github.com/repos/BishopFox/sliver/releases"
          export GIT_COMMIT=$(git rev-parse HEAD || echo "unknown")
          export GIT_DIRTY=$(git diff --quiet || echo 'Dirty')
          export ARMORY_PUBLIC_KEY="RWSBpxpRWDrD7Fe+VvRE3c2VEDC2NK80rlNCj+BX0gz44Xw07r6KQD9L"
          export ARMORY_REPO_URL="https://api.github.com/repos/sliverarmory/armory/releases"
          
          # 设置构建标志
          export LDFLAGS="-s -w \
            -extldflags '-static -Wl,--strip-all' \
            -X github.com/bishopfox/sliver/client/version.Version=${VERSION} \
            -X github.com/bishopfox/sliver/client/version.CompiledAt=${COMPILED_AT} \
            -X github.com/bishopfox/sliver/client/version.GithubReleasesURL=${RELEASES_URL} \
            -X github.com/bishopfox/sliver/client/version.GitCommit=${GIT_COMMIT} \
            -X github.com/bishopfox/sliver/client/version.GitDirty=${GIT_DIRTY} \
            -X github.com/bishopfox/sliver/client/assets.DefaultArmoryPublicKey=${ARMORY_PUBLIC_KEY} \
            -X github.com/bishopfox/sliver/client/assets.DefaultArmoryRepoURL=${ARMORY_REPO_URL}"
          
          # 确保vendor目录存在
          go mod vendor || echo "Vendor modules already present"
          
          echo "下载资产文件"
          chmod +x ./go-assets.sh
          ./go-assets.sh || echo "资产文件可能已经存在"
          
          # 构建服务器
          echo "Building sliver-server for CentOS 5.11 i686..."
          go build -mod=vendor -trimpath -tags "netgo,osusergo,server" -ldflags "${LDFLAGS}" -o sliver-server-centos5-i686 ./server
          
          # 使用UPX进一步压缩二进制文件
          echo "压缩二进制文件..."
          upx -9 sliver-server-centos5-i686
          
          # 验证构建结果
          file sliver-server-centos5-i686
          EOF
          
          # 使脚本可执行
          chmod +x build.sh
          
          # 在Docker容器中运行构建
          docker run -v $(pwd):/build sliver-build /bin/sh -c "cd /build && ./build.sh"

      - name: Test binary compatibility
        run: |
          # 验证二进制文件是否为静态链接的32位可执行文件
          file sliver-server-centos5-i686
          ldd sliver-server-centos5-i686 || echo "Binary is static (expected)"

      - name: Upload sliver server
        uses: actions/upload-artifact@v4
        with:
          name: sliver-server-centos5-i686
          path: sliver-server-centos5-i686
          
      - name: Create README
        run: |
          cat > README-centos5-i686.md << 'EOF'
          # Sliver Server for CentOS 5.11 i686

          此构建专为老旧的CentOS 5.11 i686系统设计，构建设置如下：

          - 基于静态编译的Go应用程序
          - 使用Alpine进行交叉编译
          - 目标系统：Linux 2.6.18内核，glibc 2.5
          - 构建特性：
            - 静态链接（无外部依赖）
            - 32位i686架构
            - 使用UPX压缩以减小体积
          
          ## 使用方法

          1. 下载二进制文件
          2. 赋予执行权限：`chmod +x sliver-server-centos5-i686`
          3. 运行服务器：`./sliver-server-centos5-i686`

          首次运行时，服务器将生成所需的配置文件和证书。
          
          ## 注意事项
          
          - 此二进制文件已经过静态编译，不依赖系统库
          - 为保证最佳兼容性，使用`-extldflags '-static'`构建
          - 使用UPX压缩，如运行时遇到问题，可尝试解压缩：`upx -d sliver-server-centos5-i686`
          EOF

      - name: Upload README
        uses: actions/upload-artifact@v4
        with:
          name: sliver-server-centos5-i686-docs
          path: README-centos5-i686.md 
