name: Build Sliver Server for CentOS 5.11 i686

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便git describe能够工作
          
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        
      - name: Ensure assets script is executable
        run: |
          chmod +x go-assets.sh
          ls -la go-assets.sh
          
      - name: Create Dockerfile for Alpine
        run: |
          cat > Dockerfile.alpine << 'EOT'
          FROM golang:1.22.2-alpine3.19
          # 安装基本构建工具和依赖
          RUN apk add --no-cache build-base git ca-certificates upx curl bash zip unzip xz
          # 设置工作目录
          WORKDIR /build
          # 设置环境变量
          ENV CGO_ENABLED=0
          ENV GOOS=linux
          ENV GOARCH=386
          EOT

      - name: Build Docker image
        run: docker build -t sliver-build -f Dockerfile.alpine .

      - name: Apply critical fixes for 32-bit build
        run: |
          # 修复configs/crack.go的整数溢出问题
          echo "检查configs/crack.go是否需要修复..."
          if grep -q "const defaultMaxFileSize = 10 \* 1024 \* 1024 \* 1024" ./server/configs/crack.go; then
            echo "发现defaultMaxFileSize可能导致32位溢出，需要修复..."
            
            # 备份原始文件
            cp ./server/configs/crack.go ./server/configs/crack.go.bak
            
            # 1. 修复整数常量定义为int64类型
            sed -i 's/const defaultMaxFileSize = 10 \* 1024 \* 1024 \* 1024/const defaultMaxFileSize int64 = 10 \* 1024 \* 1024 \* 1024/g' ./server/configs/crack.go
            sed -i 's/const defaultMaxDiskUsage = 5 \* defaultMaxFileSize/const defaultMaxDiskUsage int64 = 5 \* defaultMaxFileSize/g' ./server/configs/crack.go
            
            # 2. 修复结构体字段的类型
            sed -i 's/MaxFileSize  int/MaxFileSize  int64/g' ./server/configs/crack.go
            sed -i 's/MaxDiskUsage int/MaxDiskUsage int64/g' ./server/configs/crack.go
            
            # 3. 修复任何函数参数类型声明
            sed -i 's/MaxFileSize int /MaxFileSize int64 /g' ./server/configs/crack.go
            sed -i 's/MaxDiskUsage int /MaxDiskUsage int64 /g' ./server/configs/crack.go
            
            echo "修改后的文件内容概览："
            grep -n "defaultMaxFileSize" ./server/configs/crack.go || echo "未找到defaultMaxFileSize"
            grep -n "defaultMaxDiskUsage" ./server/configs/crack.go || echo "未找到defaultMaxDiskUsage"
            grep -n "MaxFileSize" ./server/configs/crack.go || echo "未找到MaxFileSize"
            grep -n "MaxDiskUsage" ./server/configs/crack.go || echo "未找到MaxDiskUsage"
          else
            echo "未发现需要修复的代码模式，跳过修复"
          fi
          
          # 修复loot.go中的整数溢出问题
          echo "检查loot.go中的MaxLootSize是否需要修复..."
          if grep -q "MaxLootSize = 2 \* 1024 \* 1024 \* 1024" ./server/loot/loot.go; then
            echo "发现MaxLootSize可能导致32位溢出，需要修复..."
            
            # 备份原始文件
            cp ./server/loot/loot.go ./server/loot/loot.go.bak
            
            # 修复整数常量定义为int64类型
            sed -i 's/MaxLootSize = 2 \* 1024 \* 1024 \* 1024/MaxLootSize int64 = 2 \* 1024 \* 1024 \* 1024/g' ./server/loot/loot.go
            
            echo "修复后的MaxLootSize:"
            grep -n "MaxLootSize" ./server/loot/loot.go || echo "未找到MaxLootSize"
            
            # 修复类型比较，将len(lootReq.File.Data)转换为int64
            sed -i 's/MaxLootSize < len(lootReq.File.Data)/MaxLootSize < int64(len(lootReq.File.Data))/g' ./server/loot/loot.go
            
            echo "修复后的类型比较:"
            grep -n "MaxLootSize.*len" ./server/loot/loot.go || echo "未找到类型比较"
          fi

      - name: Prepare patched asset files
        run: |
          # 创建目录结构
          mkdir -p ./server/assets/
          
          # 创建assets.go文件用于no_assets构建标签
          cat > ./server/assets/assets_no_assets.go << 'EOT'
          //go:build !generate && no_assets
          // +build !generate,no_assets

          package assets

          import (
              "errors"
              "io/fs"
              "os"
              "path/filepath"
              "log"
              "strings"
          )

          // 定义常量
          const (
              GoDirName = "go"
              ZigDirName = "zig"
          )

          // 自定义日志记录器
          type Logger struct {
              stdLogger *log.Logger
          }
          func (l *Logger) Info(args ...interface{}) {
              l.stdLogger.Println(args...)
          }
          func (l *Logger) Infof(format string, args ...interface{}) {
              l.stdLogger.Printf(format, args...)
          }
          func (l *Logger) Warn(args ...interface{}) {
              l.stdLogger.Println("[WARN]", args)
          }
          func (l *Logger) Warnf(format string, args ...interface{}) {
              l.stdLogger.Printf("[WARN] "+format, args...)
          }
          func (l *Logger) Error(args ...interface{}) {
              l.stdLogger.Println("[ERROR]", args)
          }
          func (l *Logger) Errorf(format string, args ...interface{}) {
              l.stdLogger.Printf("[ERROR] "+format, args...)
          }
          func (l *Logger) Debug(args ...interface{}) {
              l.stdLogger.Println("[DEBUG]", args)
          }
          func (l *Logger) Debugf(format string, args ...interface{}) {
              l.stdLogger.Printf("[DEBUG] "+format, args...)
          }

          // 创建自定义日志记录器实例
          var setupLog = &Logger{
              stdLogger: log.New(os.Stderr, "assets: ", log.LstdFlags),
          }

          // Setup - 初始化资产
          func Setup(force bool, echo bool) {
              setupLog.Infof("[assets] Skip loading embedded assets (using no_assets tag)")
          }

          // Asset - 实现Asset函数
          func Asset(name string) ([]byte, error) {
              setupLog.Debugf("Asset called for %s (not implemented in no_assets build)", name)
              return []byte{}, errors.New("assets not available in this build")
          }

          // AssetDir - 实现AssetDir函数
          func AssetDir(name string) ([]string, error) {
              setupLog.Debugf("AssetDir called for %s (not implemented in no_assets build)", name)
              return []string{}, errors.New("assets not available in this build")
          }

          // AssetInfo - 实现AssetInfo函数
          func AssetInfo(name string) (fs.FileInfo, error) {
              setupLog.Debugf("AssetInfo called for %s (not implemented in no_assets build)", name)
              return nil, errors.New("assets not available in this build")
          }

          // English - 为英文编码器提供一组基本英语单词
          func English() []string {
              // 提供一个基本的单词列表，用于替代完整的assets.English()字典
              return []string{
                  "unauthorized", "access", "denied", "internal", "server", "error", 
                  "invalid", "password", "username", "permission", "forbidden", "unknown",
                  "system", "message", "service", "network", "computer", "protocol", "data",
              }
          }

          // GetTrafficEncoderDir - 获取流量编码器目录
          func GetTrafficEncoderDir() string {
              return filepath.Join(GetRootAppDir(), "traffic-encoders")
          }

          // GetRootAppDir - 获取应用程序根目录
          func GetRootAppDir() string {
              exePath, err := os.Executable()
              if err != nil {
                  setupLog.Errorf("Failed to get executable path: %s", err)
                  return "."
              }
              return filepath.Dir(exePath)
          }

          // GetZigDir - 获取Zig目录
          func GetZigDir(targetOS string, targetArch string) string {
              zigDir := filepath.Join(GetRootAppDir(), ".sliver-client", "zig")
              if _, err := os.Stat(zigDir); os.IsNotExist(err) {
                  os.MkdirAll(zigDir, 0700)
              }
              return zigDir
          }

          // 定义assetsFs变量
          var assetsFs = &AssetFS{
              Asset:    Asset,
              AssetDir: AssetDir,
              AssetInfo: AssetInfo,
          }

          // AssetFS - 文件系统接口实现
          type AssetFS struct {
              Asset    func(name string) ([]byte, error)
              AssetDir func(name string) ([]string, error)
              AssetInfo func(name string) (fs.FileInfo, error)
          }

          // ReadFile - 添加的为了兼容assets-helpers.go的方法
          func (a *AssetFS) ReadFile(name string) ([]byte, error) {
              return a.Asset(name)
          }

          // 为了避免编译器报错，添加缺失的一些目录函数
          func GetGoDirPath(goOS string, goArch string) string {
              return filepath.Join(".", GoDirName, goOS, goArch) 
          }

          func GetGoZipPath(goOS string, goArch string) string {
              return filepath.Join(GetGoDirPath(goOS, goArch), "go.zip")
          }

          func GetSGNPath(goOS string, goArch string) string {
              return filepath.Join(".", "sgn", goOS, goArch)
          }

          func GetGarblePath(goOS string, goArch string) string {
              return filepath.Join(".", "garble", goOS, goArch) 
          }

          func GetZigPath(goOS string, goArch string) string {
              return filepath.Join(".", ZigDirName, goOS, goArch)
          }
          EOT

          # 创建generate/binaries.go的补丁，修复assets.English()和GetZigDir问题
          if [ -f ./server/generate/binaries.go ]; then
            echo "修复binaries.go中的assets.English调用和GetZigDir调用..."
            
            # 备份原始文件
            cp ./server/generate/binaries.go ./server/generate/binaries.go.bak
            
            # 1. 找到renderImplantEnglish函数以添加allWords变量
            if grep -q "func renderImplantEnglish" ./server/generate/binaries.go; then
              sed -i '/func renderImplantEnglish/,/^}/ {
                # 如果allWords直接引用assets.English()，修改为使用局部定义变量
                s/allWords := assets.English()/allWords := []string{"unauthorized", "access", "denied", "internal", "server", "error", "invalid", "password", "username", "permission"}/g
              }' ./server/generate/binaries.go
            fi
            
            # 2. 修复GetZigDir()调用，添加参数
            sed -i 's/assets.GetZigDir()/assets.GetZigDir("linux", "386")/g' ./server/generate/binaries.go
            
            echo "修复后的GetZigDir调用:"
            grep -n "GetZigDir" ./server/generate/binaries.go || echo "未找到GetZigDir调用"
          fi
          
          # 修复encoders.go中的assets.English()调用
          if grep -q "util.SetEnglishDictionary(assets.English())" ./server/encoders/encoders.go; then
            echo "修复encoders.go中的assets.English调用..."
            
            # 备份原始文件
            cp ./server/encoders/encoders.go ./server/encoders/encoders.go.bak
            
            # 使用sed替换，执行注释掉util.SetEnglishDictionary(assets.English())
            sed -i 's/util.SetEnglishDictionary(assets.English())/\/\/ util.SetEnglishDictionary(assets.English()) \/\/ 在no_assets模式下禁用/g' ./server/encoders/encoders.go
            
            echo "修改后的init函数:"
            grep -A 10 "func init" ./server/encoders/encoders.go || echo "未找到init函数"
          fi
          
          # 检查和修复gogo/go.go中的GetZigDir调用
          if [ -f ./server/gogo/go.go ] && grep -q "GetZigDir()" ./server/gogo/go.go; then
            echo "发现无参数的GetZigDir调用，需要修复..."
            sed -i 's/GetZigDir()/GetZigDir("linux", "386")/g' ./server/gogo/go.go
            
            echo "修复后的GetZigDir调用："
            grep -n "GetZigDir" ./server/gogo/go.go || echo "未找到GetZigDir调用"
          fi

      - name: Build Sliver for CentOS 5.11
        run: |
          # 创建构建脚本
          cat > build.sh << 'EOT'
          #!/bin/bash
          set -e
          
          # 配置Git安全目录
          git config --global --add safe.directory /build
          
          # 设置版本信息
          export VERSION=$(git describe --abbrev=0 || echo "v0.0.0")
          export COMPILED_AT=$(date +%s)
          export RELEASES_URL="https://api.github.com/repos/BishopFox/sliver/releases"
          export GIT_COMMIT=$(git rev-parse HEAD || echo "unknown")
          export GIT_DIRTY=$(git diff --quiet || echo 'Dirty')
          export ARMORY_PUBLIC_KEY="RWSBpxpRWDrD7Fe+VvRE3c2VEDC2NK80rlNCj+BX0gz44Xw07r6KQD9L"
          export ARMORY_REPO_URL="https://api.github.com/repos/sliverarmory/armory/releases"
          
          # 设置构建标志
          export LDFLAGS="-s -w \
            -extldflags '-static -Wl,--strip-all' \
            -X github.com/bishopfox/sliver/client/version.Version=${VERSION} \
            -X github.com/bishopfox/sliver/client/version.CompiledAt=${COMPILED_AT} \
            -X github.com/bishopfox/sliver/client/version.GithubReleasesURL=${RELEASES_URL} \
            -X github.com/bishopfox/sliver/client/version.GitCommit=${GIT_COMMIT} \
            -X github.com/bishopfox/sliver/client/version.GitDirty=${GIT_DIRTY} \
            -X github.com/bishopfox/sliver/client/assets.DefaultArmoryPublicKey=${ARMORY_PUBLIC_KEY} \
            -X github.com/bishopfox/sliver/client/assets.DefaultArmoryRepoURL=${ARMORY_REPO_URL}"
          
          # 确保vendor目录存在
          go mod vendor || echo "Vendor modules already present"
          
          # 最终构建检查
          echo "=============== 最终构建前检查 ==============="
          
          # 检查configs/crack.go的修改
          echo "检查configs/crack.go的类型修改..."
          if ! grep -q "defaultMaxFileSize int64" ./server/configs/crack.go; then
            echo "⚠️ defaultMaxFileSize未定义为int64类型，应用修复..."
            sed -i 's/const defaultMaxFileSize = 10 \* 1024 \* 1024 \* 1024/const defaultMaxFileSize int64 = 10 \* 1024 \* 1024 \* 1024/g' ./server/configs/crack.go
          fi
          
          if ! grep -q "defaultMaxDiskUsage int64" ./server/configs/crack.go; then
            echo "⚠️ defaultMaxDiskUsage未定义为int64类型，应用修复..."
            sed -i 's/const defaultMaxDiskUsage = 5 \* defaultMaxFileSize/const defaultMaxDiskUsage int64 = 5 \* defaultMaxFileSize/g' ./server/configs/crack.go
          fi
          
          # 检查loot.go的修改
          echo "检查loot.go的类型修改..."
          if ! grep -q "MaxLootSize int64" ./server/loot/loot.go; then
            echo "⚠️ MaxLootSize未定义为int64类型，应用修复..."
            sed -i 's/MaxLootSize = 2 \* 1024 \* 1024 \* 1024/MaxLootSize int64 = 2 \* 1024 \* 1024 \* 1024/g' ./server/loot/loot.go
          fi
          
          if ! grep -q "MaxLootSize < int64(len" ./server/loot/loot.go; then
            echo "⚠️ loot.go中的类型比较未修复，应用修复..."
            sed -i 's/MaxLootSize < len(lootReq.File.Data)/MaxLootSize < int64(len(lootReq.File.Data))/g' ./server/loot/loot.go
          fi
          
          # 确认encoders.go中的Assets.English调用已经注释
          if grep -q "util.SetEnglishDictionary(assets.English())" ./server/encoders/encoders.go; then
            echo "⚠️ encoders.go中的assets.English调用仍然存在，应用修复..."
            sed -i 's/util.SetEnglishDictionary(assets.English())/\/\/ util.SetEnglishDictionary(assets.English()) \/\/ 在no_assets模式下禁用/g' ./server/encoders/encoders.go
          fi
          
          echo "构建标志: netgo,osusergo,no_assets,server,go_sqlite"
          echo "使用的ldflags: ${LDFLAGS}"
          
          echo "=============== 开始构建 ==============="
          # 构建服务器 - 使用no_assets标签跳过资产嵌入，使用go_sqlite启用纯Go的SQLite实现
          go build -buildvcs=false -mod=vendor -trimpath -tags "netgo,osusergo,no_assets,server,go_sqlite" -ldflags "${LDFLAGS}" -o sliver-server-centos5-i686 ./server
          
          # 使用UPX进一步压缩二进制文件
          echo "压缩二进制文件..."
          upx -9 sliver-server-centos5-i686
          
          # 验证构建结果
          file sliver-server-centos5-i686
          
          # 确保二进制文件确实存在并显示其大小
          ls -la sliver-server-centos5-i686
          echo "构建完成，二进制文件大小: $(du -h sliver-server-centos5-i686 | cut -f1)"
          
          # 确保文件在主机上可访问
          chmod 755 sliver-server-centos5-i686
          EOT
          
          # 使脚本可执行
          chmod +x build.sh
          
          # 在Docker容器中运行构建
          docker run -v $(pwd):/build sliver-build /bin/sh -c "cd /build && ./build.sh 2>&1 | tee build.log || (echo '构建失败' && exit 1)"

      - name: Output build log
        if: always()
        run: |
          echo "构建日志输出:"
          cat build.log || echo "No build log found"
      
      - name: Prepare binary for upload
        run: |
          echo "确认二进制文件存在:"
          ls -la
          
          # 修复权限问题并确保二进制文件可执行
          if [ -f "./sliver-server-centos5-i686" ]; then
            echo "Binary found, fixing permissions"
            sudo chown $(id -u):$(id -g) ./sliver-server-centos5-i686
            sudo chmod +x ./sliver-server-centos5-i686
            
            # 测试二进制文件
            echo "测试二进制文件:"
            file ./sliver-server-centos5-i686
            ldd ./sliver-server-centos5-i686 || echo "Binary is static (expected)"
            
            # 移动到专用目录以方便上传
            mkdir -p ./artifacts
            cp ./sliver-server-centos5-i686 ./artifacts/
            ls -la ./artifacts/
          else
            echo "Binary NOT found in workspace"
            find . -name "sliver-server*"
            exit 1
          fi
      
      - name: Upload sliver server
        uses: actions/upload-artifact@v4
        with:
          name: sliver-server-centos5-i686
          path: ./artifacts/sliver-server-centos5-i686
          if-no-files-found: error
          compression-level: 6
          overwrite: false

      - name: Create README
        run: |
          cat > README-centos5-i686.md << 'EOT'
          # Sliver Server for CentOS 5.11 i686
          
          此构建专为老旧的CentOS 5.11 i686系统设计，构建设置如下：
          - 基于静态编译的Go应用程序
          - 使用Alpine进行交叉编译
          - 目标系统：Linux 2.6.18内核，glibc 2.5
          - 构建特性：
            - 静态链接（无外部依赖）
            - 32位i686架构
            - 使用UPX压缩以减小体积
          
          ## 使用方法
          1. 下载二进制文件
          2. 赋予执行权限：`chmod +x sliver-server-centos5-i686`
          3. 运行服务器：`./sliver-server-centos5-i686`
          
          首次运行时，服务器将生成所需的配置文件和证书。
          
          ## 功能限制
          此版本使用了`no_assets`标签构建，意味着没有内置资源包（Go、编译器等）。
          如果需要使用implant生成功能，请将必要的资源手动放置在相应目录中。
          
          ## 注意事项
          
          - 此二进制文件已经过静态编译，不依赖系统库
          - 为保证最佳兼容性，使用`-extldflags '-static'`构建
          - 使用UPX压缩，如运行时遇到问题，可尝试解压缩：`upx -d sliver-server-centos5-i686`
          EOT
          
          # 确保README也放入artifacts目录
          cp README-centos5-i686.md ./artifacts/
          
      - name: Upload README
        uses: actions/upload-artifact@v4
        with:
          name: sliver-server-centos5-i686-docs
          path: ./README-centos5-i686.md 
